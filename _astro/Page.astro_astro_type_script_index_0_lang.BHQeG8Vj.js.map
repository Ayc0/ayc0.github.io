{"version":3,"file":"Page.astro_astro_type_script_index_0_lang.BHQeG8Vj.js","sources":["../../node_modules/@astrojs/starlight/components/SidebarPersistState.ts"],"sourcesContent":["// Collect required elements from the DOM.\nconst scroller = document.getElementById('starlight__sidebar');\nconst target = scroller?.querySelector<HTMLElement>('sl-sidebar-state-persist');\n\n/** Starlight uses this key to store sidebar state in `sessionStorage`. */\nconst storageKey = 'sl-sidebar-state';\n\n/** The shape used to persist sidebar state across a user’s session. */\ninterface SidebarState {\n\thash: string;\n\topen: Array<boolean | null>;\n\tscroll: number;\n}\n\n/**\n * Get the current sidebar state.\n *\n * The `open` state is loaded from session storage when the sidebar hashes match, while `scroll`\n * and `hash` are read from the current page.\n */\nconst getState = (): SidebarState => {\n\tlet open = [];\n\tconst hash = target?.dataset.hash || '';\n\ttry {\n\t\tconst rawStoredState = sessionStorage.getItem(storageKey);\n\t\tconst storedState = JSON.parse(rawStoredState || '{}');\n\t\tif (Array.isArray(storedState.open) && storedState.hash === hash) open = storedState.open;\n\t} catch {}\n\treturn {\n\t\thash,\n\t\topen,\n\t\tscroll: scroller?.scrollTop || 0,\n\t};\n};\n\n/** Store the passed sidebar state in session storage. */\nconst storeState = (state: SidebarState): void => {\n\ttry {\n\t\tsessionStorage.setItem(storageKey, JSON.stringify(state));\n\t} catch {}\n};\n\n/** Updates sidebar state in session storage without modifying `open` state. */\nconst updateState = (): void => storeState(getState());\n\n/** Updates sidebar state in session storage to include a new value for a specific `<details>` element. */\nconst setToggleState = (open: boolean, detailsIndex: number): void => {\n\tconst state = getState();\n\tstate.open[detailsIndex] = open;\n\tstoreState(state);\n};\n\n// Store the current `open` state whenever a user interacts with one of the `<details>` groups.\ntarget?.addEventListener('click', (event) => {\n\tif (!(event.target instanceof Element)) return;\n\t// Query for the nearest `<summary>` and then its parent `<details>`.\n\t// This excludes clicks outside of the `<summary>`, which don’t trigger toggles.\n\tconst toggledDetails = event.target.closest('summary')?.closest('details');\n\tif (!toggledDetails) return;\n\tconst restoreElement = toggledDetails.querySelector<HTMLElement>('sl-sidebar-restore');\n\tconst index = parseInt(restoreElement?.dataset.index || '');\n\tif (isNaN(index)) return;\n\tsetToggleState(!toggledDetails.open, index);\n});\n\n// Store sidebar state before navigating. These will also store it on tab blur etc.,\n// but avoid using the `beforeunload` event, which can cause issues with back/forward cache\n// on some browsers.\naddEventListener('visibilitychange', () => {\n\tif (document.visibilityState === 'hidden') updateState();\n});\naddEventListener('pageHide', updateState);\n"],"names":["scroller","target","storageKey","getState","open","hash","rawStoredState","storedState","storeState","state","updateState","setToggleState","detailsIndex","event","toggledDetails","restoreElement","index"],"mappings":"AACA,MAAMA,EAAW,SAAS,eAAe,oBAAoB,EACvDC,EAASD,GAAU,cAA2B,0BAA0B,EAGxEE,EAAa,mBAebC,EAAW,IAAoB,CACpC,IAAIC,EAAO,CAAC,EACN,MAAAC,EAAOJ,GAAQ,QAAQ,MAAQ,GACjC,GAAA,CACG,MAAAK,EAAiB,eAAe,QAAQJ,CAAU,EAClDK,EAAc,KAAK,MAAMD,GAAkB,IAAI,EACjD,MAAM,QAAQC,EAAY,IAAI,GAAKA,EAAY,OAASF,IAAMD,EAAOG,EAAY,KAAA,MAC9E,CAAA,CACD,MAAA,CACN,KAAAF,EACA,KAAAD,EACA,OAAQJ,GAAU,WAAa,CAChC,CACD,EAGMQ,EAAcC,GAA8B,CAC7C,GAAA,CACH,eAAe,QAAQP,EAAY,KAAK,UAAUO,CAAK,CAAC,CAAA,MACjD,CAAA,CACT,EAGMC,EAAc,IAAYF,EAAWL,GAAU,EAG/CQ,EAAiB,CAACP,EAAeQ,IAA+B,CACrE,MAAMH,EAAQN,EAAS,EACjBM,EAAA,KAAKG,CAAY,EAAIR,EAC3BI,EAAWC,CAAK,CACjB,EAGAR,GAAQ,iBAAiB,QAAUY,GAAU,CACxC,GAAA,EAAEA,EAAM,kBAAkB,SAAU,OAGxC,MAAMC,EAAiBD,EAAM,OAAO,QAAQ,SAAS,GAAG,QAAQ,SAAS,EACzE,GAAI,CAACC,EAAgB,OACf,MAAAC,EAAiBD,EAAe,cAA2B,oBAAoB,EAC/EE,EAAQ,SAASD,GAAgB,QAAQ,OAAS,EAAE,EACtD,MAAMC,CAAK,GACAL,EAAA,CAACG,EAAe,KAAME,CAAK,CAC3C,CAAC,EAKD,iBAAiB,mBAAoB,IAAM,CACtC,SAAS,kBAAoB,UAAsBN,EAAA,CACxD,CAAC,EACD,iBAAiB,WAAYA,CAAW","x_google_ignoreList":[0]}