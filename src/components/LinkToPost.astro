---
import { getEntry, render } from "astro:content";
import { LinkCard } from "@astrojs/starlight/components";

import {
  getCreatedDate,
  getSeriesHtml,
  getTagsHtml,
} from "@components/get-posts";

export interface Props {
  slug: string;
  includeDate?: boolean;
  includeTags?: boolean;
  includeReadingTime?: boolean;
  includeDescription?: boolean;
  includeSeries?: boolean;
}

const {
  slug,
  includeDate,
  includeTags,
  includeReadingTime = true,
  includeDescription = true,
  includeSeries = true,
} = Astro.props;

const post = await getEntry(
  "docs",
  slug.startsWith("posts/") ? slug : "posts/" + slug,
);
if (post == null) {
  throw new Error(`slug ${slug} isn’t valid`);
}

// TODO: include in the name the series' name (only for light/dark for now)

let description: string | undefined;

if (includeReadingTime) {
  const { remarkPluginFrontmatter } = await render(post);
  description = remarkPluginFrontmatter.readingTime.displayedText;
}

if (includeDate) {
  const date = getCreatedDate(post);
  if (!description) {
    description = date;
  } else {
    description += ` • ${date}`;
  }
}
if (includeTags) {
  const tags = getTagsHtml(post);
  if (tags) {
    if (!description) {
      description = tags;
    } else {
      description += `<br/>${tags}`;
    }
  }
}

if (includeDescription && post.data.description) {
  const descriptionToAdd = post.data.description;
  if (!description) {
    description = descriptionToAdd;
  } else {
    description = `<p>${description}</p><p>${descriptionToAdd}</p>`;
  }
}

const props: { href: string; title: string; description?: string } = {
  href: import.meta.env.BASE_URL + post.slug,
  title: post.data.title,
};
if (description) {
  props.description = description;
}

if (includeSeries) {
  const seriesHtml = getSeriesHtml(post);
  if (seriesHtml) {
    props.title += " " + seriesHtml;
  }
}
---

<div data-pagefind-ignore>
  <LinkCard {...props} />
</div>
